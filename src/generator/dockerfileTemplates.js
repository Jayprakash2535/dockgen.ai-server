const { getConfig } = require("../config");

function installCmd(pm) {
  switch (pm) {
    case "yarn":
      return "yarn install --frozen-lockfile";
    case "pnpm":
      return "pnpm install --frozen-lockfile";
    case "bun":
      return "bun install --frozen-lockfile";
    default:
      return "npm ci";
  }
}

function runCmd(pm, script) {
  switch (pm) {
    case "yarn":
      return `yarn ${script}`;
    case "pnpm":
      return `pnpm ${script}`;
    case "bun":
      return `bun ${script}`;
    default:
      return `npm run ${script}`;
  }
}

function baseNodeImage() {
  const { DEFAULT_NODE_VERSION } = getConfig();
  return `node:${DEFAULT_NODE_VERSION}`;
}

function nextjsTemplate(pm) {
  return `# Generated by DockGen AI
FROM ${baseNodeImage()} AS deps
WORKDIR /app
COPY package*.json ./
COPY yarn.lock* pnpm-lock.yaml* bun.lockb* ./
RUN ${installCmd(pm)}

FROM ${baseNodeImage()} AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .
RUN ${runCmd(pm, "build")}

FROM ${baseNodeImage()} AS runner
WORKDIR /app
ENV NODE_ENV=production
COPY --from=builder /app/package*.json ./
COPY --from=builder /app/yarn.lock* /app/pnpm-lock.yaml* /app/bun.lockb* ./
RUN if [ -f pnpm-lock.yaml ]; then pnpm install --frozen-lockfile --prod; \
  elif [ -f yarn.lock ]; then yarn install --frozen-lockfile --production=true; \
  elif [ -f bun.lockb ]; then bun install --frozen-lockfile; \
  elif [ -f package-lock.json ]; then npm ci --omit=dev; \
  else npm install --omit=dev; fi
COPY --from=builder /app/.next ./.next
COPY --from=builder /app/public ./public
EXPOSE 3000
CMD ["${pm === "npm" ? "npm" : pm}", "run", "start"]
`;
}

function reactViteTemplate(pm) {
  return `# Generated by DockGen AI
FROM ${baseNodeImage()} AS builder
WORKDIR /app
COPY package*.json ./
COPY yarn.lock* pnpm-lock.yaml* bun.lockb* ./
RUN ${installCmd(pm)}
COPY . .
RUN ${runCmd(pm, "build")}

FROM nginx:alpine AS runner
COPY --from=builder /app/dist /usr/share/nginx/html
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]
`;
}

function reactCRATemplate(pm) {
  return `# Generated by DockGen AI
FROM ${baseNodeImage()} AS builder
WORKDIR /app
COPY package*.json ./
COPY yarn.lock* pnpm-lock.yaml* bun.lockb* ./
RUN ${installCmd(pm)}
COPY . .
RUN ${runCmd(pm, "build")}

FROM nginx:alpine AS runner
COPY --from=builder /app/build /usr/share/nginx/html
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]
`;
}

function vueTemplate(pm) {
  return reactViteTemplate(pm);
}

function angularTemplate(pm) {
  return `# Generated by DockGen AI
FROM ${baseNodeImage()} AS builder
WORKDIR /app
COPY package*.json ./
COPY yarn.lock* pnpm-lock.yaml* bun.lockb* ./
RUN ${installCmd(pm)}
COPY . .
RUN ${runCmd(pm, "build")}

FROM nginx:alpine AS runner
COPY --from=builder /app/dist /usr/share/nginx/html
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]
`;
}

function nodeBackendTemplate(pm) {
  return `# Generated by DockGen AI
FROM ${baseNodeImage()} AS deps
WORKDIR /app
COPY package*.json ./
COPY yarn.lock* pnpm-lock.yaml* bun.lockb* ./
# Install dependencies (fallback when no lockfile)
RUN if [ -f pnpm-lock.yaml ]; then pnpm install --frozen-lockfile; \
  elif [ -f yarn.lock ]; then yarn install --frozen-lockfile; \
  elif [ -f bun.lockb ]; then bun install --frozen-lockfile; \
  elif [ -f package-lock.json ]; then npm ci; \
  else npm install; fi

FROM ${baseNodeImage()} AS runner
WORKDIR /app
ENV NODE_ENV=production
COPY --from=deps /app/node_modules ./node_modules
COPY package*.json ./
COPY . .
# Ensure production-only deps when using npm; others may need separate flags
RUN if [ -f package-lock.json ]; then npm prune --omit=dev; fi
EXPOSE 3000
CMD ["${pm === "npm" ? "npm" : pm}", "run", "start"]
`;
}

function getTemplateForDetection(detected) {
  const pm = detected.pkgManager || "npm";
  switch (detected.type) {
    case "nextjs":
      return nextjsTemplate(pm);
    case "react-vite":
      return reactViteTemplate(pm);
    case "react":
      // CRA uses build dir
      return reactCRATemplate(pm);
    case "vue":
      return vueTemplate(pm);
    case "angular":
      return angularTemplate(pm);
    case "node":
    default:
      return nodeBackendTemplate(pm);
  }
}

module.exports = { getTemplateForDetection };
